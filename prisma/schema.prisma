// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client" 
}



datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  OVERDUE 
}


enum Roles {
  ORGADMIN
  PROJECTMANAGER
  EMPLOYEE
}

model Organization {
  id        String    @id @default(uuid())
  name      String
  users     User[]
  projects  Project[]
  createdAt DateTime  @default(now()) @map("created_at")

  @@map("organizations")
}

model User {
  id             String     @id @default(uuid())
  name           String
  email          String     @unique
  role           Roles
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String     @map("organization_id")
  auth           Auth?
  timeLogs       TimeLog[]
  tasks          Task[]     @relation("AssignedTasks")
  createdAt      DateTime   @default(now()) @map("created_at")

  @@map("users")
}

model Project {
  id             String     @id @default(uuid())
  name           String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String     @map("organization_id")
  workflows      Workflow[]
  tasks          Task[]
  createdAt      DateTime   @default(now()) @map("created_at")

  @@map("projects")
}

model Workflow {
  id        String   @id @default(uuid())
  name      String
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String   @map("project_id")
  tasks     Task[]

  @@map("workflows")
}

model Task {
  id           String     @id @default(uuid())
  title        String
  description  String?
  status       TaskStatus @default(PENDING)
  deadline     DateTime?   @map("deadline")   

  user         User       @relation("AssignedTasks", fields: [userId], references: [id])
  userId       String     @map("user_id")

  project      Project    @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId    String     @map("project_id")

  workflow     Workflow   @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  workflowId   String     @map("workflow_id")

  dependencies Task[]     @relation("TaskDeps")
  dependents   Task[]     @relation("TaskDeps")

  timeLogs     TimeLog[]
  externalLogs ExternalLog[]

  createdAt    DateTime   @default(now()) @map("created_at")
  updatedAt    DateTime   @updatedAt @map("updated_at")

  @@map("tasks")
}

model TimeLog {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @map("user_id")

  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId    String   @map("task_id")

  hours     Float    // số giờ làm việc

  date      DateTime // ngày log

  createdAt DateTime @default(now()) @map("created_at")

  @@map("time_logs")
}


model Auth {
  id        String   @id @default(uuid())
  username  String   @unique
  password  String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @unique @map("user_id")
  createdAt DateTime @default(now()) @map("created_at")

  @@map("auths")
}

model ExternalLog {
  id          String   @id @default(uuid()) @db.Uuid
  taskId      String
  hours       Float
  date        DateTime
  projectCode String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  task        Task     @relation(fields: [taskId], references: [id])

  @@map("external_logs")
}

enum KPIMetricUnit {
  PERCENTAGE
  DAYS
  COUNT
  HOURS
}

model KPIMetric {
  id          String       @id @default(uuid())
  date        DateTime
  metricName  String
  value       Float
  unit        KPIMetricUnit
  createdAt   DateTime     @default(now()) @map("created_at")

  @@map("kpi_metrics")
}

model AuditLog {
  id        String   @id @default(uuid())
  userId    String
  action    String   // CREATE, UPDATE, DELETE
  target    String   // "task", "user", "project", ...
  targetId  String?  // optional: ID của đối tượng bị tác động
  data      Json
  timestamp DateTime @default(now())
}
